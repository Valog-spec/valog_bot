from typing import Any, Dict, Sequence, cast

from aiogram.filters.callback_data import CallbackData
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder


class MenuCallBack(CallbackData, prefix="menu"):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

    Attributes:
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–Ω—é
        menu_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ/–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
        category (int | None): ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        product_id (int | None): ID —Ç–æ–≤–∞—Ä–∞
        order_id (int | None): ID –∑–∞–∫–∞–∑–∞
    """

    level: int
    menu_name: str
    category: int | None = None
    page: int = 1
    product_id: int | None = None
    order_id: int | None = None


def get_user_main_btns(
    *, level: int, sizes: tuple[int] = (2,)
) -> InlineKeyboardMarkup | ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏

    Args:
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–Ω—é
        sizes (tuple[int], optional): –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä—è–¥–∞–º

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–¢–æ–≤–∞—Ä—ã üçî": "catalog",
        "–ö–æ—Ä–∑–∏–Ω–∞ üõí": "cart",
        "–û –Ω–∞—Å ‚ÑπÔ∏è": "about",
        # "–û–ø–ª–∞—Ç–∞ üí∞": "payment",
        "–î–æ—Å—Ç–∞–≤–∫–∞ ‚õµ": "shipping",
        "–ú–æ–∏ –∑–∞–∫–∞–∑—ã": "orders",
        "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É": "support",
    }
    for text, menu_name in btns.items():
        if menu_name == "catalog":
            keyboard.add(
                InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(
                        level=level + 1, menu_name=menu_name
                    ).pack(),
                )
            )
        elif menu_name == "cart":
            keyboard.add(
                InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(level=3, menu_name=menu_name).pack(),
                )
            )
        elif menu_name == "orders":
            keyboard.add(
                InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(level=5, menu_name=menu_name).pack(),
                )
            )
        else:
            keyboard.add(
                InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(level=level, menu_name=menu_name).pack(),
                )
            )

    return keyboard.adjust(*sizes).as_markup()


def get_user_catalog_btns(
    *, level: int, categories: Sequence, sizes: tuple[int] = (2,)
) -> InlineKeyboardMarkup | ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤

    Args:
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–Ω—é
        categories (Sequence): –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        sizes (tuple[int], optional): –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä—è–¥–∞–º
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardBuilder()

    keyboard.add(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=MenuCallBack(level=level - 1, menu_name="main").pack(),
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
            callback_data=MenuCallBack(level=3, menu_name="cart").pack(),
        )
    )

    for c in categories:
        keyboard.add(
            InlineKeyboardButton(
                text=c.name,
                callback_data=MenuCallBack(
                    level=level + 1, menu_name=c.name, category=c.id
                ).pack(),
            )
        )

    return keyboard.adjust(*sizes).as_markup()


def get_products_btns(
    *,
    level: int,
    category: int,
    page: int,
    pagination_btns: dict,
    product_id: int,
    sizes: tuple[int, int] = (2, 1),
) -> InlineKeyboardMarkup | ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º

    Args:
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        category (int): ID —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        page (int): –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_btns (dict): –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        product_id (int): ID —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        sizes (tuple[int]): –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardBuilder()

    keyboard.add(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=MenuCallBack(level=level - 1, menu_name="catalog").pack(),
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–ö–æ—Ä–∑–∏–Ω–∞ üõí",
            callback_data=MenuCallBack(level=3, menu_name="cart").pack(),
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–í –∫–æ—Ä–∏–∑–∏–Ω—É üíµ",
            callback_data=MenuCallBack(
                level=level, menu_name="add_to_cart", product_id=product_id
            ).pack(),
        )
    )

    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(
                InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(
                        level=level,
                        menu_name=menu_name,
                        category=category,
                        page=page + 1,
                    ).pack(),
                )
            )

        elif menu_name == "previous":
            row.append(
                InlineKeyboardButton(
                    text=text,
                    callback_data=MenuCallBack(
                        level=level,
                        menu_name=menu_name,
                        category=category,
                        page=page - 1,
                    ).pack(),
                )
            )

    return keyboard.row(*row).as_markup()


def get_user_cart(
    *,
    level: int,
    page: int | None,
    pagination_btns: dict | None,
    product_id: int | None,
    sizes: tuple[int] = (3,),
) -> InlineKeyboardMarkup | ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π

    Args:
       level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
       page (int | None): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
       pagination_btns (dict | None): –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ None
       product_id (int | None): ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ None
       sizes (tuple[int], optional): –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

    Returns:
       InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardBuilder()
    if page:
        keyboard.add(
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å",
                callback_data=MenuCallBack(
                    level=level, menu_name="delete", product_id=product_id, page=page
                ).pack(),
            )
        )
        keyboard.add(
            InlineKeyboardButton(
                text="-1",
                callback_data=MenuCallBack(
                    level=level, menu_name="decrement", product_id=product_id, page=page
                ).pack(),
            )
        )
        keyboard.add(
            InlineKeyboardButton(
                text="+1",
                callback_data=MenuCallBack(
                    level=level, menu_name="increment", product_id=product_id, page=page
                ).pack(),
            )
        )

        keyboard.adjust(*sizes)

        row = []
        for text, menu_name in cast(Dict[Any, Any], pagination_btns).items():
            if menu_name == "next":
                row.append(
                    InlineKeyboardButton(
                        text=text,
                        callback_data=MenuCallBack(
                            level=level, menu_name=menu_name, page=page + 1
                        ).pack(),
                    )
                )
            elif menu_name == "previous":
                row.append(
                    InlineKeyboardButton(
                        text=text,
                        callback_data=MenuCallBack(
                            level=level, menu_name=menu_name, page=page - 1
                        ).pack(),
                    )
                )

        keyboard.row(*row)

        # add_carts = InlineKeyboardButton(
        #     text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑",
        #     callback_data=MenuCallBack(level=level, menu_name="cart").pack()
        # )
        # keyboard.row(add_carts)

        row2 = [
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†",
                callback_data=MenuCallBack(level=0, menu_name="main").pack(),
            ),
            InlineKeyboardButton(
                text="–ó–∞–∫–∞–∑–∞—Ç—å",
                callback_data=MenuCallBack(
                    level=4, product_id=product_id, menu_name="order"
                ).pack(),
            ),
        ]
        return keyboard.row(*row2).as_markup()
    else:
        keyboard.add(
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†",
                callback_data=MenuCallBack(level=0, menu_name="main").pack(),
            )
        )

        return keyboard.adjust(*sizes).as_markup()


# def get_user_order(
#         *,
#         level: int,
#         page: int | None,
#         pagination_btns: dict | None,
#         product_id: int | None,
#         sizes: tuple[int] = (3,)
# ) -> InlineKeyboardMarkup:
#
#     keyboard = InlineKeyboardBuilder()
#     keyboard.add(InlineKeyboardButton(text='–Ω–∞–∑–∞–¥',
#                                       callback_data=MenuCallBack(level=level, menu_name='delete',
#                                                                  product_id=product_id, page=page).pack()))
#     keyboard.add(InlineKeyboardButton(text='-1',
#                                       callback_data=MenuCallBack(level=level, menu_name='decrement',
#                                                                  product_id=product_id, page=page).pack()))
#     keyboard.add(InlineKeyboardButton(text='+1',
#                                       callback_data=MenuCallBack(level=level, menu_name='increment',
#                                                                  product_id=product_id, page=page).pack()))
#
#     keyboard.adjust(*sizes)
#
#     return keyboard.adjust(*sizes).as_markup()

#
# def get_user_orders_btns(*, sizes: tuple[int] = (2,)) -> InlineKeyboardMarkup:
#     keyboard = InlineKeyboardBuilder()
#     keyboard.add(InlineKeyboardButton(text='–Ω–∞–∑–∞–¥',
#                                       callback_data=MenuCallBack(level=0, menu_name='main').pack()))
#
#     keyboard.adjust(*sizes)
#
#     return keyboard.adjust(*sizes).as_markup()


def get_user_orders(
    *,
    level: int,
    page: int | None,
    pagination_btns: dict | None,
    product_id: int | None,
    order_id: int | None,
    sizes: tuple[int] = (3,),
) -> InlineKeyboardMarkup | ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        page (int | None): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None
        pagination_btns (dict | None): –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ None
        product_id (int | None): ID —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ None
        order_id (int | None): ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None
        sizes (tuple[int], optional): –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = InlineKeyboardBuilder()
    if page:
        keyboard.add(
            InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å",
                callback_data=MenuCallBack(
                    level=6,
                    menu_name="payment",
                    product_id=product_id,
                    order_id=order_id,
                    page=page,
                ).pack(),
            )
        )
        keyboard.add(
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å",
                callback_data=MenuCallBack(
                    level=7,
                    menu_name="delete",
                    product_id=product_id,
                    page=page,
                    order_id=order_id,
                ).pack(),
            )
        )
        keyboard.adjust(*sizes)

        row = []
        for text, menu_name in cast(Dict[Any, Any], pagination_btns).items():
            if menu_name == "next":
                row.append(
                    InlineKeyboardButton(
                        text=text,
                        callback_data=MenuCallBack(
                            level=level, menu_name=menu_name, page=page + 1
                        ).pack(),
                    )
                )
            elif menu_name == "previous":
                row.append(
                    InlineKeyboardButton(
                        text=text,
                        callback_data=MenuCallBack(
                            level=level, menu_name=menu_name, page=page - 1
                        ).pack(),
                    )
                )

        keyboard.row(*row)

        row2 = [
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†",
                callback_data=MenuCallBack(level=0, menu_name="main").pack(),
            ),
        ]
        return keyboard.row(*row2).as_markup()
    else:
        keyboard.add(
            InlineKeyboardButton(
                text="–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†",
                callback_data=MenuCallBack(level=0, menu_name="main").pack(),
            )
        )

        return keyboard.adjust(*sizes).as_markup()


def get_callback_btns(
    *, btns: dict[str, str], sizes: tuple[int] = (2,)
) -> InlineKeyboardMarkup | ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

    Args:
        btns (dict[str, str]): –°–ª–æ–≤–∞—Ä—å
        sizes (tuple[int], optional): –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫

    Returns:
        InlineKeyboardMarkup: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()
